(function () {
    const DESKTOP_QUERY = '(pointer: fine) and (hover: hover)';
    gsap.registerPlugin(ScrollTrigger);

    // —Ö—Ä–∞–Ω–∏—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ —Å–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Ö —É–±–∏–≤–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å
    const instances = new Map();

    function killSection(section) {
        const list = instances.get(section);
        if (list) {
            list.forEach(st => st.kill());
            instances.delete(section);
        }
        const track = section.querySelector('.hscroll__track');
        if (track) gsap.set(track, { clearProps: 'transform' });
    }

    function setupSection(section) {
        const track = section.querySelector('.hscroll__track');
        if (!track) return;

        // —É–±—å—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ (–ø—Ä–∏ refresh/resize)
        killSection(section);

        const headerOffset = parseInt(section.dataset.hscrollOffset || '0', 10);
        const start = headerOffset ? `top top+=${headerOffset}` : 'top top';

        const getGap = () => {
            const cs = getComputedStyle(track);
            return parseFloat(cs.columnGap || cs.gap || '0') || 0;
        };
        const calcDistance = () => Math.max(0, track.scrollWidth - section.clientWidth);

        // –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (calcDistance() <= 0) return;

        const stList = [];

        // –æ—Å–Ω–æ–≤–Ω–æ–π tween: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª ‚Üí transform: translateX
        const tween = gsap.to(track, {
            x: () => -calcDistance(),
            ease: 'none',
            overwrite: true,
            scrollTrigger: {
                trigger: section,
                start,
                end: () => `+=${calcDistance()}`,
                pin: true,
                scrub: 0.6,
                anticipatePin: 0.5,
                invalidateOnRefresh: true
            }
        });
        stList.push(tween.scrollTrigger);

        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π SNAP –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        if ('hscrollSnap' in section.dataset) {
            const items = track.querySelectorAll('.services__slider-item, [data-hslide]');
            const snapTrigger = ScrollTrigger.create({
                trigger: section,
                start,
                end: () => `+=${calcDistance()}`,
                scrub: true,
                snap: {
                    snapTo: () => {
                        const gap = getGap();
                        const widths = Array.from(items).map(el => el.getBoundingClientRect().width);
                        const totalTrack = widths.reduce((a, b) => a + b, 0) + gap * Math.max(0, items.length - 1);
                        const maxShift = Math.max(1, totalTrack - section.clientWidth);
                        let acc = 0;
                        const positions = widths.map(w => {
                            const pos = Math.min(1, Math.max(0, acc / maxShift));
                            acc += w + gap;
                            return pos;
                        });
                        if (positions[positions.length - 1] !== 1) positions.push(1);
                        return positions;
                    },

                    duration: { min: 0.25, max: 0.9 },
                    ease: 'power3.out',
                    delay: 0.05,
                    directional: true,
                    inertia: false
                }
            });
            stList.push(snapTrigger);
        }

        // –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥—Ä—É–∑—è—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –æ—Å–≤–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç—ã
        track.querySelectorAll('img').forEach(img => {
            if (!img.complete) img.addEventListener('load', () => ScrollTrigger.refresh(), { once: true });
        });

        instances.set(section, stList);
    }

    function initAll() {
        // const isDesktop = matchMedia(DESKTOP_QUERY).matches;
        const sections = document.querySelectorAll('[data-hscroll]');
        // if (!isDesktop) {
        //     sections.forEach(killSection);
        //     ScrollTrigger.refresh();
        //     return;
        // }
        sections.forEach(setupSection);
        ScrollTrigger.refresh();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.addEventListener('load', initAll);
    // –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ/—Å–º–µ–Ω–µ –º–∞–∫–µ—Ç–∞
    window.addEventListener('resize', () => ScrollTrigger.refresh());
    // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–º—É–ª—è—Ç–æ—Ä—ã)
    const mql = matchMedia(DESKTOP_QUERY);
    mql.addEventListener('change', initAll);
})();

const swiper = new Swiper(".marquee", {
    loop: true,
    slidesPerView: 'auto',
    allowTouchMove: false,
    speed: 4000,
    autoplay: {
        delay: 0,
        disableOnInteraction: false,
        pauseOnMouseEnter: false
    },
    loopAdditionalSlides: 5,
    breakpoints: {
        0: {
            spaceBetween: 25,
        },

        768: {
            spaceBetween: 40,
        }
    }
});

const swiper2 = new Swiper(".reviews__slider", {
    loop: true,
    slidesPerView: 'auto',
    spaceBetween: 40,
    allowTouchMove: false,
    speed: 4000,
    autoplay: {
        delay: 0,
        disableOnInteraction: false,
    },

    // Pagination (—Ç–æ—á–∫–∏) ‚Äî —Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞–∂–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª–∫–µ
    pagination: {
        el: ".reviews__pagination",
        clickable: true,
    },
    breakpoints: {
        // –ú–æ–±–∏–ª—å–Ω—ã–µ
        0: {
            allowTouchMove: true,     // —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–≤–∞–π–ø
            autoplay: false,          // –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–ª–µ–π
            loop: false,              // –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å loop —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª —Ç–æ—á–∫–∏
            slidesPerView: 'auto',      // –ø–æ –≤–∫—É—Å—É
            spaceBetween: 0,
            speed: 500,
        },

        // –ü–ª–∞–Ω—à–µ—Ç –∏ –≤—ã—à–µ
        768: {
            allowTouchMove: false,
            autoplay: {
                delay: 0,
                disableOnInteraction: false,
            },
            loop: true,
            slidesPerView: 'auto',
            spaceBetween: 40,
        }
    }
});


document.addEventListener("DOMContentLoaded", () => {
    const items = document.querySelectorAll(".accordion__item");

    // üëâ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (items.length > 0) {
        const first = items[0];
        first.classList.add("active");
        const firstContent = first.querySelector("p");
        firstContent.style.maxHeight = firstContent.scrollHeight + "px";
    }

    items.forEach((item) => {
        const header = item.querySelector("h4");

        header.addEventListener("click", () => {
            const content = item.querySelector("p");
            const isOpen = item.classList.contains("active");

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
            items.forEach((i) => {
                if (i !== item) {
                    i.classList.remove("active");
                    const p = i.querySelector("p");
                    p.style.maxHeight = null;
                }
            });

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
            if (!isOpen) {
                item.classList.add("active");
                content.style.maxHeight = content.scrollHeight + "px";
            } else {
                item.classList.remove("active");
                content.style.maxHeight = null;
            }
        });
    });
});

document.addEventListener("scroll", () => {
    const header = document.querySelector(".top-menu");
    if (window.scrollY > 50) {
        header.classList.add("scrolled");
    } else {
        header.classList.remove("scrolled");
    }
});


/// Mobile menu

const burger = document.querySelector('.mobile-burger');
const mobileMenu = document.querySelector('.mobile-menu');
const closeBtn = document.querySelector('.close-menu');

burger.addEventListener('click', () => {
    mobileMenu.classList.add('is-open');
    document.body.classList.add('body-lock');
});

closeBtn.addEventListener('click', () => {
    mobileMenu.classList.remove('is-open');
    document.body.classList.remove('body-lock');
});

mobileMenu.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
        mobileMenu.classList.remove('is-open');
        document.body.classList.remove('body-lock');
    });
});

document.querySelectorAll('a[href^="#"]').forEach(link => {
    link.addEventListener('click', function(e) {
        const targetId = this.getAttribute('href');

        // –µ—Å–ª–∏ href –ø—Ä–æ—Å—Ç–æ "#", –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (targetId.length < 2) return;

        e.preventDefault();
        const targetEl = document.querySelector(targetId);
        if (!targetEl) return;

        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        targetEl.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        const mobileMenu = document.querySelector('.mobile-menu');
        if (mobileMenu.classList.contains('is-open')) {
            mobileMenu.classList.remove('is-open');
            document.body.classList.remove('body-lock');
        }
    });
});

// modal

(() => {
    const OPEN_ATTR = 'data-cf-open';
    const CLOSE_ATTR = 'data-cf-close';

    let lockScrollTop = 0;
    let lastFocused = null;

    // helpers
    const lockBody = () => {
        lockScrollTop = window.scrollY || document.documentElement.scrollTop;
        document.body.style.position = 'fixed';
        document.body.style.top = `-${lockScrollTop}px`;
        document.body.style.left = '0';
        document.body.style.right = '0';
        document.body.style.width = '100%';
    };
    const unlockBody = () => {
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.left = '';
        document.body.style.right = '';
        document.body.style.width = '';
        window.scrollTo(0, lockScrollTop);
    };

    const byId = (id) => document.getElementById(`cf-modal-${id}`);

    const openModal = (id) => {
        const modal = byId(id);
        if (!modal) return;
        if (modal.getAttribute('aria-hidden') === 'false') return;

        lastFocused = document.activeElement;
        modal.setAttribute('aria-hidden', 'false');
        // lockBody();

        // –∞–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –∏–Ω–ø—É—Ç–µ
        const firstInput = modal.querySelector('input,button,select,textarea,[tabindex]:not([tabindex="-1"])');
        firstInput?.focus();

        document.addEventListener('keydown', escClose);
    };

    const closeModal = (modal) => {
        if (!modal) return;
        modal.setAttribute('aria-hidden', 'true');
        // unlockBody();
        document.removeEventListener('keydown', escClose);
        lastFocused?.focus?.();
    };

    const escClose = (e) => {
        if (e.key === 'Escape') {
            const opened = document.querySelector('.cf-modal[aria-hidden="false"]');
            if (opened) closeModal(opened);
        }
    };

    // –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (e) => {
        const openBtn = e.target.closest(`[${OPEN_ATTR}]`);
        if (openBtn) {
            e.preventDefault();
            const id = openBtn.getAttribute(OPEN_ATTR);
            openModal(id);
            return;
        }

        const closeBtn = e.target.closest(`[${CLOSE_ATTR}]`);
        if (closeBtn) {
            const modal = closeBtn.closest('.cf-modal');
            closeModal(modal);
            return;
        }

        // –∫–ª–∏–∫ –ø–æ ¬´—Ñ–æ–Ω—É¬ª
        const overlay = e.target.classList?.contains('cf-modal__overlay') ? e.target : null;
        if (overlay) {
            const modal = overlay.closest('.cf-modal');
            closeModal(modal);
        }
    });

    // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–∞–±–º–∏—Ç—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    document.addEventListener('submit', (e) => {
        const form = e.target.closest('[data-cf-form]');
        if (!form) return;

        // –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π submit/ajax.
        // –ø–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º.
        e.preventDefault();

        const modal = form.closest('.cf-modal');
        // TODO: —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å AJAX –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –ø–æ —É—Å–ø–µ—Ö—É –∑–∞–∫—Ä—ã–≤–∞—Ç—å:
        // fetch(...).then(() => closeModal(modal))
        closeModal(modal);
    });
})();